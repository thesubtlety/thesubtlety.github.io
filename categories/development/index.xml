<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on The Subtlety</title>
    <link>https://thesubtlety.github.io/categories/development/</link>
    <description>Recent content in Development on The Subtlety</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Aug 2015 00:27:58 +0000</lastBuildDate>
    <atom:link href="https://thesubtlety.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OpenDNS&#39;s AppSec Training Lab</title>
      <link>https://thesubtlety.github.io/post/opendnss-appsec-training-lab/</link>
      <pubDate>Sun, 23 Aug 2015 00:27:58 +0000</pubDate>
      
      <guid>https://thesubtlety.github.io/post/opendnss-appsec-training-lab/</guid>
      <description>&lt;p&gt;I came across OpenDNS Security Ninjas AppSec &lt;a href=&#34;https://github.com/opendns/Security_Ninjas_AppSec_Training&#34;&gt;Training Lab&lt;/a&gt; not too long ago and found its simplicity rather enjoyable. It&amp;rsquo;s a simple web app written in PHP which illustrates each of the &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Table_of_Contents&#34;&gt;OWASP Top 10&lt;/a&gt; categories. As I was going through the exercises I found myself checking to see how the vulnerable code was written and how the issues could be remediated.&lt;/p&gt;

&lt;p&gt;Since the lab is geared towards beginners, I thought it might be helpful to provide brief explanations along with links to the relevant lines of source code. For each level/OWASP vulnerability, I simply added a &amp;ldquo;Why&amp;rdquo; section to each &amp;ldquo;Solution&amp;rdquo; area linking to the sink on Github along with a brief explanation.&lt;/p&gt;

&lt;p&gt;The merge request is apparently pending an OpenDNS maintainer, but the fork is on &lt;a href=&#34;https://github.com/thesubtlety/Security_Ninjas_AppSec_Training&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The OSCP | Penetration Testing With Kali Linux</title>
      <link>https://thesubtlety.github.io/post/the-oscp-penetration-testing-with-kali-linux/</link>
      <pubDate>Sat, 20 Dec 2014 22:03:29 +0000</pubDate>
      
      <guid>https://thesubtlety.github.io/post/the-oscp-penetration-testing-with-kali-linux/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;https://thesubtlety.github.io/img/pwk-box-small-128x150.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;ve spent the last few months working through the &lt;a href=&#34;http://www.offensive-security.com/information-security-training/penetration-testing-with-kali-linux/&#34;&gt;Penetration Testing with Kali Linux&lt;/a&gt; course by Offensive Security which has been an awesome &lt;a href=&#34;http://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf&#34;&gt;learning&lt;/a&gt; experience.&lt;/p&gt;

&lt;p&gt;Much has been said on this course and I&amp;rsquo;ll only briefly go over my experience and takeaways. The following reviews were helpful in making the decision to take the course.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review by &lt;a href=&#34;https://blog.g0tmi1k.com/2011/07/pentesting-with-backtrack-pwb/&#34;&gt;g0tmi1k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review by &lt;a href=&#34;http://fourfourfourfour.co/2014/04/20/oscp-review/&#34;&gt;recrudesce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review from &lt;a href=&#34;http://buffered.io/posts/oscp-and-me/&#34;&gt;Buffered.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review from &lt;a href=&#34;http://www.iodigitalsec.com/offensive-security-pwb-course-and-oscp-certification-review/&#34;&gt;IODigitalSec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review from &lt;a href=&#34;http://www.securitysift.com/offsec-pwb-oscp/&#34;&gt;SecuritySift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
For a little preview of what&amp;rsquo;s involved, check out the free &lt;a href=&#34;http://www.offensive-security.com/metasploit-unleashed/Main_Page&#34;&gt;Metasploit Unleashed&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Material, Course, and Exam&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After completing the 300+ page &lt;a href=&#34;http://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf&#34;&gt;pdf material&lt;/a&gt;, &lt;a href=&#34;http://www.offensive-security.com/about-us/&#34;&gt;muts&lt;/a&gt;-narrated videos and exercises, I
focused my attention on the lab. It is at this point, when the course turns from a more academic focus to an applied and practical nature, that the magnitude of what one is learning begins to sink in. A lab with nearly fifty diverse machines across multiple networks awaits with no further instructions. But with enumeration comes vulnerable machines, and each machine is different. Some are simple to exploit, some are difficult, some are incredibly frustrating. Every one is rewarding.&lt;/p&gt;

&lt;p&gt;Several months later, after getting root or system access on nearly every machine, and completing a final lab penetration test report of over two hundred pages, I felt ready for the 24 hour exam. Exam day had me giddy as a little kid and went smoothly. Ten hours in I had enough points to pass but I spent another eight hours attempting to privilege escalate my way to system on one remaining machine. I eventually succumbed to exhaustion knowing I had more than enough points to pass and wishing to be functional the next day to write up my exam report.&lt;/p&gt;

&lt;p&gt;Several days after submitting the exam report along with my final lab report, I received the much-anticipated email stating that I had passed the exam and now held my Offensive Security Certified Professional certification. I have mixed feelings about the value of certifications since just about anyone can take a test and pass. But this one - this one a person has to work for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few take aways&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Document, document, document&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I used Keepnote on my host machine to track everything. It&amp;rsquo;s certainly not without its frustrations, but it does the job. Don&amp;rsquo;t forget to back everything up!&lt;/li&gt;
&lt;li&gt;Write up every machine after popping, including a summary and detailed steps along with key screenshots - you will thank yourself later. It&amp;rsquo;s easy to forget, and coming back a few weeks or months later while writing up your report because you forgot something and finding your documentation didn&amp;rsquo;t include some small issue is frustrating.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Enumeration is key&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every single machine is vulnerable and exploitable, it&amp;rsquo;s simply a matter of finding it.&lt;/li&gt;
&lt;li&gt;Reset boxes before attempting them, especially Windows. I spent many an unneeded hour working through possible exploits when a SMB service had simply
been crashed by a previous student and Metasploit would have gotten me in immediately.&lt;/li&gt;
&lt;li&gt;Privilege escalation provides lessons in patience. The following resources were invaluable.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.greyhathacker.net/?p=738&#34;&gt;http://www.greyhathacker.net/?p=738&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fuzzysecurity.com/tutorials/16.html&#34;&gt;http://www.fuzzysecurity.com/tutorials/16.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&#34;&gt;http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Post exploitation is paramount&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple boxes include passwords, scripts, and log files which will provide access or attack vectors to other machines.&lt;/li&gt;
&lt;li&gt;Missing one thing can lead to wasted time chasing down red herrings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Utilize the admins&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make use of the admins on IRC at #offsec. While they won&amp;rsquo;t give you the answer, they often ask questions which get you thinking in a certain way, and simply explaining what steps you have taken can lead to other paths for success.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
Commit the time&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The material covered in this course is not terribly difficult, but it does take practice. And practice requires time. I spent at least fifteen hours every week in the labs over the course of a few months.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt;
I think the only dissatisfaction I experienced was while working on a exploiting a machine while another student was attempting to do the same and continually reset the box wiping out any steps taken to obtain a shell for instance. This was rare, though.&lt;/p&gt;

&lt;p&gt;Overall, this was an awesome learning experience. If you&amp;rsquo;re thinking about doing it, and you have the time to dedicate, there is no question: just do it. If you actually want to learn and understand the material, rather than just memorize a bunch of information as is the case with so many other certifications, this is for you. It&amp;rsquo;s affordable, lab time is easily extended, admins are almost always available, and the cost is not prohibitive.&lt;/p&gt;

&lt;p&gt;Thanks Offensive Security and team for putting together such a fantastic course.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Web App in Rails</title>
      <link>https://thesubtlety.github.io/post/building-a-web-app-in-rails/</link>
      <pubDate>Fri, 11 Apr 2014 01:57:03 +0000</pubDate>
      
      <guid>https://thesubtlety.github.io/post/building-a-web-app-in-rails/</guid>
      <description>&lt;p&gt;A brilliant &lt;a href=&#34;http://blaedj.github.io/&#34;&gt;software engineering friend&lt;/a&gt; and I were recently discussing with another mutual friend the inefficiencies of employees filling out paper forms after completion of a construction job and the inefficiencies of transferring said forms to excel and so on. Said friend and I figured we could probably fix this with a web app for a nominal fee, but which would greatly increase our mutual friends&amp;rsquo; productivity. A win win situation if there ever was one.&lt;/p&gt;

&lt;p&gt;So we set about the process of building a web application in Ruby on Rails. And several weeks later, we had one completed. It&amp;rsquo;s nothing too fancy, but one that is being used in production and is adding business value. And it was an awesome learning experience. I just wanted to highlight some of what we encountered, how we went about the task, and a few lessons learned along the way.&lt;/p&gt;

&lt;p&gt;Said friend and I had tinkered with Ruby on Rails before, but never to any great extent, nor had we worked with a business customer in this fashion by building a product to solve a problem, so I&amp;rsquo;m quite pleased with the way our stabbings in the dark went.&lt;/p&gt;

&lt;p&gt;We had gotten okay requirements with the first discussions, and putting our collective heads together to make a small pile of rocks, we discussed how long this would take, what tools, libraries, and third party applications to use, where we would be hosting, understanding how we would actually solve the problem, and what to charge. Mutual friend agreed, and off we went.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working remotely&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We worked together remotely on this project. Skype and Google hangouts worked well when our schedules coincided. Starting out, we worked in tandem to get the foundation
down and a workflow established, and as we became more proficient, our productivity increased as we worked in parallel on different issues. Git, Github, and Heroku make for incredibly painless collaboration. I learned that git is a stupid content tracker, and a great tool. And for small deployments like this one, Heroku&amp;rsquo;s robustness and free-ness were awesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Building&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we hadn&amp;rsquo;t used RoR too much beyond tutorials, we bootstrapped using &lt;a href=&#34;http://ruby.railstutorial.org/&#34;&gt;Michael Hartl&amp;rsquo;s tutorial&lt;/a&gt; to get us started. Unlike many online tutorials, this one has great explanations and security hygiene and explained in great detail the user authentication and authorization pieces (among many others). And gems like bcrypt&amp;rsquo;s has_secure_token for example, makes the implementation of secure passwords brain-dead simple. Rails make things very easy implement. Almost too easy. That opinion is likely due to not having worked too in depth with PHP, Apache, and MySQL. And now that I begin to recall the school projects of years past, RoR is quite nice indeed.&lt;/p&gt;

&lt;p&gt;Our requirements didn&amp;rsquo;t have us do anything too difficult, although we certainly had our share of hurdles; both in learning how the framework works and actually solving design problems. Working our way through various database relationships was a challenge, and pretty rewarding once we came up with solutions. Proper inheritance, indexing, and scoping all gave cause for some extra reading. Heroku makes things incredibly easy as far as using APIs, so incorporating email was no problem either.&lt;/p&gt;

&lt;p&gt;UI and UX is always interesting. I hate poorly thought out UIs with a passion, so building a sensible interface was important. Yet css, javascript, html, and various cross-platform and browser (in)compatibilities can easily drive one nuts. And since I have no desire to wander about in insanity, we ended up using Bootstrap and HTML5 to keep things simple. And simple is beautiful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Changing requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And just like any other project, we had multiple feature requests as the weeks went by. All honored because we are kind and generous souls. These things had impacts on our initial estimates, but understandably so from our wonderful customer&amp;rsquo;s perspective.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Few Lessons Learned&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Requirements are very important. More time spent at the beginning better understanding how users interact with and use an application is essential.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Understanding the various differences between mobile and desktop and between various browser rendering is pretty important. For example, we initially used Chrome for testing purposes with things working great. When we got reports back saying dates don&amp;rsquo;t work we were initially baffled. Apparently Firefox doesn&amp;rsquo;t render the date drop down and requires a very specific format.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Helpful error messages and graceful error handling is paramount to ease user experience.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Logging and alerting is essential. Multiple times we have been immediately alerted when things break or user experience is poor, allowing us to investigate and resolve.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tests are essential. Refactoring a feature should never break existing functionality.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;On Securing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fortunately Rails 4 comes with many secure defaults such as protect_from_forgery for example, which adds csrf tokens to forms automatically. There are many great resources out there to help secure web apps. &lt;a href=&#34;http://brakemanscanner.org/&#34;&gt;Brakeman&lt;/a&gt; and &lt;a href=&#34;https://github.com/codesake/codesake-dawn&#34;&gt;Dawn by Codesake&lt;/a&gt; both caught a number of issues that were remediated. And while &lt;a href=&#34;https://www.owasp.org/images/8/89/Rails_Security_2.pdf&#34;&gt;this&lt;/a&gt; resource is aging, and many of the issues outlined in it are remediated in later versions of Ruby, it is a great guide explaining what to look for, why various practices are poor, their consequences, and how to remediate them.&lt;/p&gt;

&lt;p&gt;No mention of app sec should be without reference to OWASP. The &lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&#34;&gt;OWASP Top Ten&lt;/a&gt; and &lt;a href=&#34;https://www.owasp.org/index.php/Secure_SDLC_Cheat_Sheet&#34;&gt;Secure SDLC&lt;/a&gt; have a plethora of good resources for Builders, Breakers, and Defenders. While this project was fairly ad-hoc, there are enough resources on OWASP for another post and give rise to more than a few questions and places for improvement going forward. The &lt;a href=&#34;https://www.owasp.org/index.php/Ruby_on_Rails_Cheatsheet&#34;&gt;OWASP RoR Cheatsheet&lt;/a&gt; is a good resource as well. And another: The &lt;a href=&#34;http://guides.rubyonrails.org/security.html&#34;&gt;RoR Security Guide&lt;/a&gt;. There is no end to good resources out there.&lt;/p&gt;

&lt;p&gt;Yet another well written and mildly humourous post by Honeybadger is &lt;a href=&#34;http://www.honeybadger.io/blog/guides/2013/03/09/ruby-security-tutorial-and-rails-security-guide&#34;&gt;here&lt;/a&gt; which contains wise advice such as the following.
&lt;code&gt;match &amp;quot;/launch_all_the_missiles&amp;quot;, to: &amp;quot;missiles#launch_all&amp;quot;
Conclusion: PANIC!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And Kalzumeus&amp;rsquo;s awesome blog and excellent &lt;a href=&#34;http://www.kalzumeus.com/2013/01/31/what-the-rails-security-issue-means-for-your-startup/&#34;&gt;post&lt;/a&gt; on Rails security and startups has a ton of all around great advice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While this post is fairly short, I learned an incredible amount from completing this project. From both the technical aspects of working with Ruby on Rails, git, various APIs, and Heroku to the business and customer aspects, this was challenging, fun, and rewarding. And getting to delve into the web app sec world in more detail and have a postive impact on a business application is a reward in its own. Of course maintaining a production web application means the work is never done, so there is that as well. A little lesson all in it&amp;rsquo;s own, I suppose.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>